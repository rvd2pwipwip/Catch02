///// 1. TOOLING AND SET UP
install node.js (to npm install node modules) 
install Chrome React Developer Tools
install cmder terminal
install VSCode with Prettier and Simple React Snippets
cd to working folder and npm install dependencies from package.json
OR SO MUCH SIMPLER WITH:
install create-react-app app-name
npm start to boot app on local host (3000)
index.js alert('hey') to validate

///// Push new existing local project to GitHub:
cd into project folder
git init
Create a remote, empty folder/repository on Github
git remote add origin [GitHub repository web address]
git push origin master


///// 2. THINKING AND UNDERSTANDING REACT COMPONENTS
Component: Reusable custom tags with props, state, context and render (spit HTML)

///// 3. CREATING AND RENDERING FIRST COMPONENTS
using es6 modules to import:

import React from 'react';
import { render } from 'react-dom';

class ClassName extends React.Component {
  render(){
    return <p>Component</p>
  }
}

export default ClassName

render(<p>Render Check</p>, document.getElementById('main')); //renders Render Check

Mount the component:
render(<ClassName />, document.getElementById('main')); //renders Component

Refactored to index.js and ClassName component:

index.js:
import React from 'react';
import { render } from 'react-dom';
import ClassName from './components/ClassName';

render(<ClassName />, document.getElementById('main')); //renders Component

ClassName.jsx:
import React, { Component } from "react";

class ClassName extends React.Component {
  render(){
    return <p>Component</p>
  }
}

export default ClassName

Simple React Snippets: imr imrc cc sfc ss ren

///// 4. WRITING HTML WITH JSX
<div className="class-name"></div>

emmet shortcut: div.class-name outputs: <div className="class-name"></div>

return ()

no sibling elements: use <div></div> or <React.Fragment></React.Fragment> to wrap siblings
{ } = JavaScript in JSX

///// 5. LOADING CSS INTO OUR REACT APPLICATION
Import in index.js:
import "./css/style.css"; //import global css

///// 6. CREATING OUR APPLICATION LAYOUT WITH COMPONENTS
Create parent App component
Simple React Snippets imrc cc ouputs:
import React, { Component } from 'react';

class App extends Component {
  state = {  }
  render() { 
    return ( <p>I'm the parent App</p> );
  }
}
 
export default App;

Import than mount <App /> component in index.js
import App from "./components/App";
render(<App />, document.getElementById('main'));

Create App scaffold and child components:
<App/><Header/><Order/><Inventory>

class App extends Component {
  state = {};
  render() {
    return (
      <div className="catch-of-the-day">
        <div className="menu">
          <Header tagline="Fresh Seafood Market" />
        </div>
        <Order />
        <Inventory />
      </div>
    );
  }
}

export default App;

///// 7. PASSING DYNAMIC DATA WITH PROPS
props is how you get data to a component (state = home, props = delivery vehicle)
In App.js:
<Header code="HTML" /> to move tagline value to Header props

In Header.jsx:
<h3>
  <span>{this.props.code}</span>
</h3>

///// 8. STATELESS FUNCTIONAL COMPONENTS
Components without state, used only to render JSX should be made into sfc (can have props)

const Header = props => (
  <p>I'm the Header {props.code}}</p>
);

PS: props can be destructured into ({code})

///// 9. ROUTING WITH REACT ROUTER
1.create a component named Router.jsx (even router is a component in react)
import { BrowserRouter, Route, Switch } from 'react-router-dom'

2.stateless functional component Router with BrowserRouter, Switch and Route (one for each route)
3.import router rendered components in Router.jsx
4.import React from "react"; //needed because of JSX use, otherwise compile fails with 'React' must be in scope when using JSX
<Route/> takes 2 params: 1=path, 2=component e.g. <Route path="/store/:storeId" component={App} />

///// 10. HELPER AND UTILITY FUNCTIONS
import helper functions withes6 module syntax:
import { helperFunction } from "../helpers";

///// 11. EVENTS, REFS AND THIS BINDING
1.create a ref property in the StorePicker class to access the <input/> element:
myInput = React.createRef();
2.add the ref property to the input element:
<input
  ref={this.myInput}
  ...
/>
3.set onSubmit event on <form/> element (not onClick on <button/>!)
4.create onSubmit handler function AS A PROPERTY WITH ARROW FUNCTION to have this binding to StorePicker:
  handleEvent = e => {};

///// 12. HANDLING EVENTS
No page refresh: change url with push state through react Router
The Router component is the parent of StorePicker (and all its imported for render components)
Router has props.history with push method so it is available to StorePicker:

goToStore = e => {
  e.preventDefault(); //stop the form from submitting
  const storeName = this.myInput.value.value; //get the text from the input (with a ref)
  this.props.history.push(`/store/${storeName}`); //change page to /store/:captured_input
};

///// 13. UNDERSTANDING STATE
State is an object that holds data. 
When the data in app state changes, React updates it everywhere it is used.

Create a form to add fish.
When form submits, it turns all inputs in property/value of fish object (with ref).








































